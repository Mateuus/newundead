#include "r3dPCH.h"
#include "SH.h"

namespace Light{
namespace SH{

	static const double PI = 3.14159265358979323846;
	static const double SQRT2 = 1.41421356237309504880;

 

	static double factorials[64] = 
	{
		1.0,  
		1.0,
		2.0,
		6.0,
		24.0,
		120.0,
		720.0,
		5040.0,
		40320.0,
		362880.0,
		3628800.0,
		39916800.0,
		479001600.0,
		6227020800.0,
		87178291200.0,
		1307674368000.0,
		20922789888000.0,
		355687428096000.0,
		6402373705728000.0,
		121645100408832000.0,
		2432902008176640000.0,
		51090942171709440000.0,
		1124000727777607680000.0,
		25852016738884976640000.0,
		620448401733239439360000.0,
		15511210043330985984000000.0,
		403291461126605635584000000.0,
		10888869450418352160768000000.0,
		304888344611713860501504000000.0,
		8841761993739701954543616000000.0,
		265252859812191058636308480000000.0,
		8222838654177922817725562880000000.0,
		263130836933693530167218012160000000.0,
		8683317618811886495518194401280000000.0,
		295232799039604140847618609643520000000.0,
		10333147966386144929666651337523200000000.0,
		371993326789901217467999448150835200000000.0,
		13763753091226345046315979581580902400000000.0,
		523022617466601111760007224100074291200000000.0,
		20397882081197443358640281739902897356800000000.0,
		815915283247897734345611269596115894272000000000.0,
		33452526613163807108170062053440751665152000000000.0,
		1405006117752879898543142606244511569936384000000000.0,
		60415263063373835637355132068513997507264512000000000.0,
		2658271574788448768043625811014615890319638528000000000.0,
		119622220865480194561963161495657715064383733760000000000.0,
		5502622159812088949850305428800254892961651752960000000000.0,
		258623241511168180642964355153611979969197632389120000000000.0,
		12413915592536072670862289047373375038521486354677760000000000.0,
		608281864034267560872252163321295376887552831379210240000000000.0,
		30414093201713378043612608166064768844377641568960512000000000000.0,
		1551118753287382280224243016469303211063259720016986112000000000000.0,
		80658175170943878571660636856403766975289505440883277824000000000000.0, 
		4274883284060025564298013753389399649690343788366813724672000000000000.0, 
		230843697339241380472092742683027581083278564571807941132288000000000000.0, 
		12696403353658275925965100847566516959580321051449436762275840000000000000.0, 
		710998587804863451854045647463724949736497978881168458687447040000000000000.0, 
		40526919504877216755680601905432322134980384796226602145184481280000000000000.0, 
		2350561331282878571829474910515074683828862318181142924420699914240000000000000.0, 
		138683118545689835737939019720389406345902876772687432540821294940160000000000000.0, 
		8320987112741390144276341183223364380754172606361245952449277696409600000000000000.0, 
		507580213877224798800856812176625227226004528988036003099405939480985600000000000000.0, 
		31469973260387937525653122354950764088012280797258232192163168247821107200000000000000.0, 
		1982608315404440064116146708361898137544773690227268628106279599612729753600000000000000.0
	};

	inline double factorial(int n)
	{
		return factorials[n];
	}

	inline double P(int l, int m, double x) 
	{ 
		// evaluate an Associated Legendre Polynomial P(l,m,x) at x 
		double pmm = 1.0; 
		if(m>0) 
		{ 
			double somx2 = sqrt((1.0-x)*(1.0+x)); 
			double fact = 1.0; 
			for(int i=1; i<=m; i++) 
			{ 
				pmm *= (-fact) * somx2; 
				fact += 2.0; 
			} 
		} 
		if(l==m) return pmm; 
		double pmmp1 = x * (2.0*m+1.0) * pmm; 
		if(l==m+1) return pmmp1; 
		double pll = 0.0; 
		for(int ll=m+2; ll<=l; ++ll) 
		{ 
			pll = ( (2.0*ll-1.0)*x*pmmp1-(ll+m-1.0)*pmm ) / (ll-m); 
			pmm = pmmp1; 
			pmmp1 = pll; 
		} 
		return pll; 
	} 


	// renormalisation constant for SH function 
	inline double  K(int l, int m)	{ return sqrt(((2.0 * l + 1.0) * factorial(l - m)) / (4.0 * PI * factorial(l + m)));} 

	// return a point sample of a Spherical and Hemispherical Harmonic basis functions 
	// l is the band, range [0..N] 
	// m in the range [-l..l] 
	// theta in the range [0..Pi] for spherical and [0..Pi/2] for hemispherical
	// phi in the range [0..2*Pi] 
	double SH(int l, int m, double theta, double phi)	{ return (m==0) ? ( K(l,0)*P(l,m,cos(theta)) ) : ( (m>0) ? SQRT2*K(l,m)*cos(m*phi)*P(l,m,cos(theta)) : SQRT2*K(l,-m)*sin(-m*phi)*P(l,-m,cos(theta)) );	} 

}}




